#!/usr/bin/env python2

##
## Program name: ftpclient
## Author: Andrew Swaim
## Date: November 2019
## Description: 
##

import sys
import re
import os.path
from os import path
from socket import *

# Name: run()
# Desc: The main function that starts the server.
# Pre : chatserve application is run, specifying a port on the command line.
# Post: chatserve server is running and listening for connections.
def run():
    
    # Validate minimum args
    if len(sys.argv) < 5 or len(sys.argv) > 6:
        sys.exit("Usage: ftpclient host port1 [-l] [-g filename] port2")

    # Capture first args
    host = sys.argv[1]
    ctrlPort = sys.argv[2]
    flag = sys.argv[3]

    # Capture and validate remaining args
    filename = None
    dataPort = None
    if len(sys.argv) == 5:
        if flag == '-l':
            dataPort = sys.argv[4]
        else:
            sys.exit("Usage: ftpclient host port1 [-l] [-g filename] port2")
    elif len(sys.argv) == 6:
        if flag == '-g':
            filename = sys.argv[4]
            dataPort = sys.argv[5]
        else:
            sys.exit("Usage: ftpclient host port1 [-l] [-g filename] port2")

    # Validate port numbers
    if int(ctrlPort) < 1024 or int(ctrlPort) > 65535:
        sys.exit("ERROR, invalid port: {}".format(ctrlPort))
    if int(dataPort) < 1024 or int(dataPort) > 65535:
        sys.exit("ERROR, invalid port: {}".format(dataPort))
    if int(ctrlPort) < 50000 or int(dataPort) < 50000:
        print("WARNING, recommended to use port numbers above 50000")

    # connect to server
    print("Welcome to ftpclient!")
    conn = initContact(host, ctrlPort)

    # send request
    req = ' '.join(sys.argv[3:])
    res = makeRequest(req, conn)

    # handle response
    if res == 'OK':
        data = recvData(conn, dataPort)
    else:
        conn.close()
        sys.exit(1)

    # handle received data
    if flag == '-l':
        print("Directory contents from server:")
        print(data)
    else:
        saveData(data, filename)

    # exit
    conn.close()
    

# Name: dataListen()
# Desc: Sets up a TCP socket on the port num specified on the command line and begins listening.
# Rtrn: The file descriptor for the opened and listening connection
# Pre : A port number was specified on the command line when the application was started.
# Post: a TCP socket is created on the specified port and begins listening.
def dataListen(port):

    # python socket programming info from official docs
    # in section about python socket programming examples
    # https://docs.python.org/2/library/socket.html#example
    sock = None
    for res in getaddrinfo(gethostname(), port, AF_UNSPEC, SOCK_STREAM, 0, AI_PASSIVE):
        af, socktype, proto, canonname, sa = res
        try:
            sock = socket(af, socktype, proto)
        except error as msg:
            sock = None
            continue
        try:
            sock.bind(sa)
            sock.listen(1)
        except error as msg:
            sock.close()
            sock = None
            continue
        break
    if sock is None:
        sys.exit("ERROR, could not open socket at port: {}".format(port))
    return sock

# Name: ctrlConnect()
# Desc:
# Arg1:
# Arg2:
# Pre :
# Post:
# Rtrn:
def ctrlConnect(host, port):

    # python socket programming info from official docs
    # in section about python socket programming examples
    # https://docs.python.org/2/library/socket.html#example
    sock = None
    for res in getaddrinfo(host, port, AF_UNSPEC, SOCK_STREAM):
        af, socktype, proto, canonname, sa = res
        try:
            sock = socket(af, socktype, proto)
        except error as msg:
            sock = None
            continue
        try:
            sock.connect(sa)
        except error as msg:
            sock.close()
            sock = None
            continue
        break
    if sock is None:
        sys.exit("ERROR, could not connect to host: {} at port: {}".format(host, port))
    return sock

# Name: initContact()
# Desc:
# Arg1:
# Arg2:
# Pre :
# Post:
# Rtrn:
def initContact(host, port):
    
    print("Attempting to connect to host: {} at port: {}".format(host, port))
    sock = ctrlConnect(host, port)
    print("Connection successful!")
    return sock

# Name: makeRequest()
# Desc:
# Arg :
# Pre :
# Post:
# Rtrn:
def makeRequest(req, conn):

    print("Sending command to server: {}".format(req))
    conn.send(req)
    res = conn.recv(128)

    if res == '':
        sys.exit("ERROR, receiving response back from server")
    else:
        print("Response from server: {}".format(res))

    return res


# Name: recvAll()
# Desc: Sends the specified message to the connection up to the global max message length.
# Arg1: conn - the data connection to send data to.
# Arg2: msg - the message to send.
# Pre : A connection is previously set up and the message to send is obtained from the user.
# Post: The message is sent to the client through the connection.
# Rtrn:
def recvAll(conn, length):

    # python socket programming info from official docs
    # in section called 'Using a Socket'
    # https://docs.python.org/2/howto/sockets.html#using-a-socket
    total = 0
    msg = []
    while total < length:
        data = conn.recv(min(length - total, 2048))
        if data == '':
            return data # return the blank string and let the calling routine handle the error
        msg.append(data)
        total += len(data)

    return ''.join(msg)

# Name: recvData()
# Desc:
# Arg1:
# Arg2:
# Pre :
# Post:
# Rtrn:
def recvData(ctrlConn, port):

    # setup and receive data connection
    print("Setting up data connection...")
    sock = dataListen(port)
    dataConn, addr = sock.accept()
    print("Data connection established! Receiving data...")

    # receive data length first
    length = int(dataConn.recv(128).replace('\x00',''))
    if length == '':
        sys.exit("ERROR, receiving data length from server")
    print("Size of incoming data: {}".format(length))

    # then data
    print("Receiving data...")
    data = recvAll(dataConn, length)
    if data == '' or len(data) < length:
        sys.exit("ERROR, receiving data from server")

    print("Transfer complete!")
    
    # send acknowledgment of receipt to server on control connection
    ctrlConn.send('OK')
    print("Acknowledgment OK sent to server")
    ctrlConn.close()

    return data

# Name: saveData()
# Desc:
# Arg1:
# Arg2:
# Pre :
# Post:
def saveData(data, filename):

    # Using python os.path from official documentation
    # https://docs.python.org/2/library/os.path.html

    # Using python built-in file handling functions from official docs
    # https://docs.python.org/2/library/functions.html#open
    print("Saving file: {}".format(filename))

    # determine if the file alraedy exists
    if path.exists(filename):
        print("Filename already exists... generating new filename")
        # generate a new unique filename (filename with "~1~", "~2~", etc. appended to end
        i = 1
        while path.exists("{}~{}~".format(filename, i)): i += 1
        filename = "{}~{}~".format(filename, i)

    fil = open(filename, "w+")
    fil.write(data)
    fil.close()
    
    print("New file created: {}".format(filename))

#########################################################################

if __name__ == "__main__":
    run()
